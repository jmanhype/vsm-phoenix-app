version: '3.8'

services:
  # =============================================================================
  # Core Application Services
  # =============================================================================
  
  # VSM Phoenix Application
  vsm-phoenix:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "4000:4000"
      - "9090:9090"  # Metrics port
    environment:
      - MIX_ENV=prod
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - DATABASE_URL=postgres://vsm_user:${POSTGRES_PASSWORD}@postgres:5432/vsm_phoenix_prod
      - RABBITMQ_URL=amqp://vsm_user:${RABBITMQ_PASSWORD}@rabbitmq:5672
      - REDIS_URL=redis://redis:6379/0
      - PHX_HOST=${PHX_HOST:-localhost}
      - PORT=4000
      - PROMETHEUS_ENABLED=true
      - TELEMETRY_ENABLED=true
      - LOG_LEVEL=${LOG_LEVEL:-info}
      # API Keys
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      # VSM Configuration
      - VSM_VIABILITY_THRESHOLD=${VSM_VIABILITY_THRESHOLD:-0.8}
      - VSM_LEARNING_RATE=${VSM_LEARNING_RATE:-0.05}
      - ENABLE_LLM_VARIETY=${ENABLE_LLM_VARIETY:-true}
      - ENABLE_TELEGRAM=${ENABLE_TELEGRAM:-true}
      - ENABLE_DASHBOARD=${ENABLE_DASHBOARD:-true}
      # Feature Flags
      - DISABLE_MCP_SERVERS=${DISABLE_MCP_SERVERS:-false}
      - DISABLE_MAGG=${DISABLE_MAGG:-false}
      - ENABLE_RECURSIVE_SPAWNING=${ENABLE_RECURSIVE_SPAWNING:-true}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./priv/static:/app/priv/static
    networks:
      - vsm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================================================
  # Database Services
  # =============================================================================
  
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: vsm_phoenix_prod
      POSTGRES_USER: vsm_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - vsm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vsm_user -d vsm_phoenix_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching and Session Storage
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - vsm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # =============================================================================
  # Message Queue Services
  # =============================================================================
  
  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: vsm_user
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE}
      RABBITMQ_DEFAULT_VHOST: /
      # Enable plugins
      RABBITMQ_PLUGINS: rabbitmq_management,rabbitmq_prometheus,rabbitmq_shovel,rabbitmq_federation
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
      - "15692:15692" # Prometheus metrics
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./config/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
      - ./config/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    networks:
      - vsm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # Monitoring & Observability Services
  # =============================================================================
  
  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - vsm-network
    restart: unless-stopped
    depends_on:
      - vsm-phoenix
      - rabbitmq

  # Grafana for Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres:5432
      GF_DATABASE_NAME: grafana
      GF_DATABASE_USER: vsm_user
      GF_DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - vsm-network
    restart: unless-stopped
    depends_on:
      - postgres
      - prometheus

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686" # Jaeger UI
      - "14268:14268" # jaeger.thrift directly from clients
      - "14250:14250" # model.proto via gRPC
    environment:
      COLLECTOR_OTLP_ENABLED: true
      COLLECTOR_ZIPKIN_HOST_PORT: :9411
    volumes:
      - jaeger_data:/badger
    networks:
      - vsm-network
    restart: unless-stopped

  # =============================================================================
  # Load Balancer & Reverse Proxy
  # =============================================================================
  
  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - vsm-phoenix
    networks:
      - vsm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # Development & Testing Services (Optional)
  # =============================================================================
  
  # Mailhog for Email Testing (Development)
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    networks:
      - vsm-network
    profiles:
      - development
    restart: unless-stopped

  # Adminer for Database Management (Development)
  adminer:
    image: adminer:latest
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    networks:
      - vsm-network
    profiles:
      - development
    restart: unless-stopped
    depends_on:
      - postgres

  # =============================================================================
  # External Service Integrations
  # =============================================================================
  
  # Hermes MCP Server (if enabled)
  hermes-mcp:
    build:
      context: ./hermes
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      MCP_PORT: 3000
      MCP_HOST: 0.0.0.0
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - ./config/hermes:/app/config:ro
    networks:
      - vsm-network
    restart: unless-stopped
    profiles:
      - mcp
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# =============================================================================
# Networks
# =============================================================================

networks:
  vsm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volumes
# =============================================================================

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jaeger_data:
    driver: local

# =============================================================================
# Additional Configuration Files Needed
# =============================================================================

# Create these configuration files:
# - config/prometheus/prometheus.yml
# - config/grafana/dashboards/
# - config/nginx/nginx.conf
# - config/rabbitmq/rabbitmq.conf
# - config/redis.conf
# - Dockerfile
# - scripts/db/init.sql