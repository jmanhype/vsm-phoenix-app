name: CI/CD Pipeline

on:
  push:
    branches: [main, phase-2-resilience-infrastructure, develop]
  pull_request:
    branches: [main, phase-2-resilience-infrastructure, develop]
  workflow_dispatch:

env:
  MIX_ENV: test
  ELIXIR_VERSION: 1.14.5
  OTP_VERSION: 27.0
  NODE_VERSION: 18.x

jobs:
  quality-checks:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: |
          deps
          _build
          node_modules
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-mix-
    
    - name: Install dependencies
      run: |
        mix deps.get
        npm ci
    
    - name: Check Elixir formatting
      run: mix format --check-formatted
    
    - name: Run Credo static analysis
      run: mix credo --strict || true
    
    - name: Check for unused dependencies
      run: mix deps.unlock --check-unused || true
    
    - name: Compile with warnings as errors
      run: mix compile --warnings-as-errors

  test-elixir:
    name: Elixir Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vsm_phoenix_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    strategy:
      matrix:
        include:
          - test-suite: "unit"
            command: "mix test --exclude integration --exclude external --cover"
          - test-suite: "integration"
            command: "mix test --only integration --cover"
          - test-suite: "isolated"
            command: "MIX_ENV=test_isolated mix test test/vsm_phoenix_test.exs --cover"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}
    
    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: |
          deps
          _build
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-
    
    - name: Install dependencies
      run: mix deps.get
    
    - name: Set up test database
      run: |
        mix ecto.create
        mix ecto.migrate
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/vsm_phoenix_test
    
    - name: Run ${{ matrix.test-suite }} tests
      run: ${{ matrix.command }}
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/vsm_phoenix_test
        RABBITMQ_HOST: localhost
        RABBITMQ_PORT: 5672
        RABBITMQ_USER: guest
        RABBITMQ_PASS: guest
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-${{ matrix.test-suite }}
        path: cover/

  test-javascript:
    name: JavaScript Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run JavaScript tests
      run: npm test
    
    - name: Lint JavaScript code
      run: npm run lint || true

  build-assets:
    name: Build Assets
    runs-on: ubuntu-latest
    needs: [test-elixir, test-javascript]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: |
          deps
          _build
          node_modules
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-mix-
    
    - name: Install dependencies
      run: |
        mix deps.get
        npm ci
    
    - name: Build production assets
      run: |
        npm run deploy
        mix phx.digest
      env:
        MIX_ENV: prod
    
    - name: Upload built assets
      uses: actions/upload-artifact@v3
      with:
        name: production-assets
        path: |
          priv/static/assets/
          priv/static/cache_manifest.json

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test-elixir, test-javascript]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          ELIXIR_VERSION=${{ env.ELIXIR_VERSION }}
          OTP_VERSION=${{ env.OTP_VERSION }}

  integration-tests:
    name: End-to-End Integration Tests
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vsm_phoenix_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}
    
    - name: Install dependencies
      run: mix deps.get
    
    - name: Run integration test scripts
      run: |
        # Run VSM system tests
        ./scripts/tests/comprehensive_vsm_proof.sh || true
        
        # Run MCP integration tests
        ./scripts/tests/validate_mcp_integration.sh || true
        
        # Run API validation tests
        ./scripts/tests/validate_vsm_api.sh || true
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/vsm_phoenix_test
        RABBITMQ_HOST: localhost
        RABBITMQ_PORT: 5672

  notify-status:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [quality-checks, test-elixir, test-javascript, build-assets, docker-build]
    if: always()
    
    steps:
    - name: Check build status
      id: status
      run: |
        if [[ "${{ needs.quality-checks.result }}" == "failure" ]] || 
           [[ "${{ needs.test-elixir.result }}" == "failure" ]] || 
           [[ "${{ needs.test-javascript.result }}" == "failure" ]] || 
           [[ "${{ needs.build-assets.result }}" == "failure" ]] || 
           [[ "${{ needs.docker-build.result }}" == "failure" ]]; then
          echo "status=failure" >> $GITHUB_OUTPUT
        else
          echo "status=success" >> $GITHUB_OUTPUT
        fi
    
    - name: Create status comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ steps.status.outputs.status }}';
          const emoji = status === 'success' ? '✅' : '❌';
          const message = status === 'success' ? 'All checks passed!' : 'Some checks failed.';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `${emoji} **CI/CD Status**: ${message}\n\n` +
                  `- Quality Checks: ${{ needs.quality-checks.result }}\n` +
                  `- Elixir Tests: ${{ needs.test-elixir.result }}\n` +
                  `- JavaScript Tests: ${{ needs.test-javascript.result }}\n` +
                  `- Asset Build: ${{ needs.build-assets.result }}\n` +
                  `- Docker Build: ${{ needs.docker-build.result }}`
          });