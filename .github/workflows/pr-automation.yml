name: ü§ñ PR Automation & Quality Gates

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]
  pull_request_review:
    types: [submitted]

env:
  MIX_ENV: test
  ELIXIR_VERSION: "1.17"
  OTP_VERSION: "27"

jobs:
  quality-gates:
    name: üõ°Ô∏è Quality Gates & Security
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üîß Setup Elixir/OTP
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}
          version-type: strict
      
      - name: üì¶ Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-
      
      - name: üìö Install Dependencies
        run: mix deps.get
      
      - name: üîç Compile & Check Warnings
        run: mix compile --warnings-as-errors
      
      - name: üßπ Format Check
        run: mix format --check-formatted
      
      - name: üïµÔ∏è Security Scan
        run: |
          mix deps.audit
          mix sobelow --config
        continue-on-error: true
      
      - name: üß™ Run Tests
        run: |
          mix test --cover --export-coverage default
          mix test.coverage
      
      - name: üìä Upload Coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./cover/excoveralls.json
          fail_ci_if_error: false

  vsm-validation:
    name: üåç VSM System Validation
    runs-on: ubuntu-latest
    needs: quality-gates
    timeout-minutes: 15
    
    services:
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
      
      - name: üîß Setup Elixir/OTP
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}
      
      - name: üì¶ Restore Cache
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
      
      - name: üìö Install Dependencies
        run: mix deps.get
      
      - name: üèóÔ∏è Compile
        run: mix compile
      
      - name: üåê VSM Integration Tests
        run: |
          mix test test/vsm_mcp_integration_test.exs
          mix test test/vsm_phoenix/system5/
        env:
          RABBITMQ_HOST: localhost
          RABBITMQ_PORT: 5672
          RABBITMQ_USER: guest
          RABBITMQ_PASS: guest
      
      - name: üîÑ Resilience Tests
        run: mix test test/vsm_phoenix/resilience/
      
      - name: üèóÔ∏è Infrastructure Tests
        run: mix test test/vsm_phoenix/infrastructure/

  telegram-security:
    name: üîê Telegram Security Validation
    runs-on: ubuntu-latest
    needs: quality-gates
    timeout-minutes: 10
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
      
      - name: üîß Setup Elixir/OTP
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}
      
      - name: üì¶ Install Dependencies
        run: mix deps.get
      
      - name: üõ°Ô∏è Security Layer Tests
        run: |
          mix test --only security
          mix test test/vsm_phoenix/infrastructure/security_test.exs
      
      - name: ü§ñ Telegram Agent Tests
        run: mix test --grep "telegram"

  causality-tracking:
    name: üìà Causality & Metrics Validation
    runs-on: ubuntu-latest
    needs: quality-gates
    timeout-minutes: 10
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
      
      - name: üîß Setup Elixir/OTP
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}
      
      - name: üì¶ Install Dependencies
        run: mix deps.get
      
      - name: üìä Causality Tracking Tests
        run: |
          mix test --grep "causality"
          mix test test/vsm_phoenix/infrastructure/causality_*
      
      - name: üìà Metrics System Tests
        run: |
          mix test --grep "metrics"
          mix test test/vsm_phoenix/infrastructure/*metrics*

  pr-review-assignment:
    name: üë• Auto-assign Reviewers
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    
    steps:
      - name: üè∑Ô∏è Auto-assign Labels
        uses: actions/labeler@v5
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
      
      - name: üë• Request Reviews
        uses: kentaro-m/auto-assign-action@v1.2.5
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          configuration-path: ".github/auto-assign.yml"

  pr-validation-summary:
    name: ‚úÖ PR Validation Summary
    runs-on: ubuntu-latest
    needs: [quality-gates, vsm-validation, telegram-security, causality-tracking]
    if: always()
    
    steps:
      - name: üìä Generate Status Report
        run: |
          echo "## ü§ñ PR Automation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quality Gates: ${{ needs.quality-gates.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### VSM Validation: ${{ needs.vsm-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### Telegram Security: ${{ needs.telegram-security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### Causality Tracking: ${{ needs.causality-tracking.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.quality-gates.result }}" == "success" && \
                "${{ needs.vsm-validation.result }}" == "success" && \
                "${{ needs.telegram-security.result }}" == "success" && \
                "${{ needs.causality-tracking.result }}" == "success" ]]; then
            echo "üéâ **All checks passed! Ready for review.**" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Some checks failed. Please review and fix issues.**" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: üìù Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('ü§ñ PR Automation Summary')
            );
            
            const summary = `## ü§ñ PR Automation Summary
            
            ### Validation Results:
            - Quality Gates: ${{ needs.quality-gates.result }}
            - VSM Validation: ${{ needs.vsm-validation.result }}
            - Telegram Security: ${{ needs.telegram-security.result }}
            - Causality Tracking: ${{ needs.causality-tracking.result }}
            
            ${needs.quality-gates.result === 'success' && needs.vsm-validation.result === 'success' && needs.telegram-security.result === 'success' && needs.causality-tracking.result === 'success' ? 'üéâ **All automation checks passed!**' : '‚ùå **Some checks require attention.**'}
            
            *Updated: ${new Date().toISOString()}*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }