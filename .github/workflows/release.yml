name: Release Management

on:
  push:
    tags:
      - 'v*'
      - 'phase-*'
      - 'release-*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v2.0.0, phase-2.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false
      draft:
        description: 'Create as draft'
        required: false
        type: boolean
        default: true

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
      
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"
    
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog between last tag and current
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [[ -z "$LAST_TAG" ]]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges ${LAST_TAG}..HEAD)
        fi
        
        # Format changelog for release notes
        cat > release_notes.md << EOF
        # Release ${{ steps.version.outputs.version }}
        
        ## 🎯 Phase 2: VSM Resilience Infrastructure
        
        This release includes:
        - 🧠 Intelligent conversation management
        - 🔒 Enhanced security features
        - 🔗 Causality tracking implementation
        - 🚀 Performance optimizations
        - 🛡️ Resilience patterns
        
        ## 📝 Changelog
        
        $CHANGELOG
        
        ## 🔧 Key Features
        
        ### Intelligent Conversations
        - Natural language understanding
        - Context-aware responses
        - Multi-turn dialogue support
        - Intent recognition and routing
        
        ### Security Enhancements
        - End-to-end encryption
        - Role-based access control
        - Audit logging
        - Secure communication channels
        
        ### Causality Tracking
        - Event correlation
        - Dependency mapping
        - Impact analysis
        - Temporal relationships
        
        ## 📊 Metrics & Performance
        
        - Response time: < 100ms (p99)
        - Throughput: 10,000+ req/s
        - Availability: 99.9%
        - Memory usage: Optimized
        
        ## 🚀 Getting Started
        
        \`\`\`bash
        # Clone the repository
        git clone https://github.com/${{ github.repository }}.git
        cd vsm-phoenix-app
        
        # Install dependencies
        mix deps.get
        npm install
        
        # Run the application
        mix phx.server
        \`\`\`
        
        ## 📚 Documentation
        
        - [Architecture Overview](docs/02_architecture/readme.md)
        - [API Reference](docs/03_api/reference/endpoints.md)
        - [Development Guide](docs/04_development/readme.md)
        - [Operations Manual](docs/05_operations/readme.md)
        
        ## 🤝 Contributors
        
        Thank you to all contributors who made this release possible!
        
        ---
        
        🤖 Generated with [Claude Code](https://claude.ai/code)
        
        Co-Authored-By: Claude <noreply@anthropic.com>
        EOF
        
        # Save changelog for artifact
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Upload release notes
      uses: actions/upload-artifact@v3
      with:
        name: release-notes
        path: release_notes.md

  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: prepare-release
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux-amd64
          - os: ubuntu-latest
            platform: linux-arm64
          - os: macos-latest
            platform: darwin-amd64
          - os: macos-latest
            platform: darwin-arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: 1.14.5
        otp-version: 27.0
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
    
    - name: Install dependencies
      run: |
        mix deps.get
        npm ci
    
    - name: Build release
      run: |
        # Build production assets
        npm run deploy
        mix phx.digest
        
        # Build Elixir release
        MIX_ENV=prod mix release
        
        # Package release
        cd _build/prod/rel/vsm_phoenix
        tar -czf vsm-phoenix-${{ needs.prepare-release.outputs.version }}-${{ matrix.platform }}.tar.gz .
        mv vsm-phoenix-*.tar.gz $GITHUB_WORKSPACE/
      env:
        MIX_ENV: prod
    
    - name: Upload release artifact
      uses: actions/upload-artifact@v3
      with:
        name: release-${{ matrix.platform }}
        path: vsm-phoenix-*.tar.gz

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-release]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v5
      with:
        path: artifacts
    
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.prepare-release.outputs.version }}
        name: VSM Phoenix ${{ needs.prepare-release.outputs.version }}
        body: ${{ needs.prepare-release.outputs.changelog }}
        draft: ${{ inputs.draft || false }}
        prerelease: ${{ inputs.prerelease || contains(needs.prepare-release.outputs.version, 'alpha') || contains(needs.prepare-release.outputs.version, 'beta') || contains(needs.prepare-release.outputs.version, 'rc') }}
        files: |
          artifacts/release-*/vsm-phoenix-*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-docker:
    name: Deploy Docker Images
    runs-on: ubuntu-latest
    needs: [prepare-release, create-github-release]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:${{ needs.prepare-release.outputs.version }}
          ghcr.io/${{ github.repository }}:latest
        labels: |
          org.opencontainers.image.title=VSM Phoenix
          org.opencontainers.image.description=Viable Systems Model implementation with Phoenix
          org.opencontainers.image.version=${{ needs.prepare-release.outputs.version }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [prepare-release, create-github-release]
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update version in documentation
      run: |
        # Update version in README
        sed -i "s/Version: .*/Version: ${{ needs.prepare-release.outputs.version }}/" README.md || true
        
        # Update version in mix.exs
        sed -i 's/version: ".*"/version: "${{ needs.prepare-release.outputs.version }}"/' mix.exs || true
        
        # Update version in package.json
        jq '.version = "${{ needs.prepare-release.outputs.version }}"' package.json > package.json.tmp
        mv package.json.tmp package.json
    
    - name: Create pull request for version updates
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update version to ${{ needs.prepare-release.outputs.version }}"
        title: "chore: update version to ${{ needs.prepare-release.outputs.version }}"
        body: |
          This PR updates the version numbers across the project to ${{ needs.prepare-release.outputs.version }}.
          
          - Updates README.md
          - Updates mix.exs
          - Updates package.json
          
          Auto-generated by release workflow.
        branch: update-version-${{ needs.prepare-release.outputs.version }}
        delete-branch: true

  notify-teams:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [prepare-release, create-github-release]
    if: success()
    
    steps:
    - name: Send notification
      run: |
        echo "🎉 Release ${{ needs.prepare-release.outputs.version }} has been created!"
        echo "📦 View release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.version }}"
        
        # Add webhook notifications here if configured
        # Example: Slack, Discord, Teams, etc.